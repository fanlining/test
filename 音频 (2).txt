asoc 设计思路

参数 
1 表明支持哪些参数   2 根据指定的参数  进行硬件设置

使用strace 命令查询执行流程

ANDROID TINYPLAY与TINYCAP流程
https://www.freesion.com/article/7678406915/


Android下的音频通道配置文件mixer_paths.xml
https://blog.csdn.net/mike8825/article/details/69487983/



【Audio driver】mixer_paths.xml文件分析
https://blog.csdn.net/qq_38091632/article/details/104406783

xml 里面的数据，当其中一个设备节点被改变，那会追踪相关的设备节点一起改变。

audiohardware  class作为向下访问的接口 （由厂家提供）
派生自   audiohardwarebase    audiohard interface

audiohardware  里面有有  audio_stream_out  还有  audio_stream_in
我感觉 audio_stream_out  这个得到是  pcm_open  得到的呢

Android Audio代码分析8 - AudioHardwareALSA::openOutputStream函数
https://www.cnblogs.com/andriod-html5/archive/2011/10/11/2539559.html

tinyalsa   里面有  pcm_open  pcm_write  pcm_read   还有设置 kconfig 的函数


Linux ALSA声卡驱动之八：ASoC架构中的Platform
https://blog.csdn.net/droidphone/article/details/7316061
snd_soc_register_platform() 该函数用于注册一个snd_soc_platform，只有注册以后，它才可以被Machine驱动使用。
snd_soc_platform  需要从  snd_soc_register_platform 中 第一参数中 继承一个名字。


研究 xml  关键词  android   audio   usecase

解析 pcm_open
https://www.cnblogs.com/chenzhizhong/p/6604405.html

搜索关键词  dapm context

注意这三个函数   （首先这三个函数来自 韦东山  alsa 移植）  / 然后注意 dapm 是怎么来的   ，韦东山移植上有讲
	snd_soc_dapm_new_controls(dapm, wm8976_dapm_widgets,
				  ARRAY_SIZE(wm8976_dapm_widgets));

	snd_soc_dapm_add_routes(dapm, audio_map, ARRAY_SIZE(audio_map));

	snd_soc_dapm_new_widgets(dapm);
	
	
	
索引关键点
到这里为止，我们为声卡创建并初始化好了所需的widget，各个widget也通过path连接在了一起，接下来，dapm等待用户的指令，一旦某个dapm kcontrol被用户空间改变，利用这些连接关系，dapm会重新创建音频路径，脱离音频路径的widget会被下电，加入音频路径的widget会被上电，所有的上下电动作都会自动完成，用户空间的应用程序无需关注这些变化，它只管按需要改变某个dapm kcontrol即可。
static const struct snd_soc_dapm_route audio_map[] = {
	/* Mono output mixer */
	{"Mono Mixer", "PCM Playback Switch", "DAC"},
	{"Mono Mixer", "Aux Playback Switch", "Aux Input"},
	{"Mono Mixer", "Line Bypass Switch", "Boost Mixer"},

	/* Speaker output mixer */
	{"Speaker Mixer", "PCM Playback Switch", "DAC"},
	{"Speaker Mixer", "Aux Playback Switch", "Aux Input"},
	{"Speaker Mixer", "Line Bypass Switch", "Boost Mixer"},

	/* Outputs */
	{"Mono Out", NULL, "Mono Mixer"},
	{"MONOOUT", NULL, "Mono Out"},
	{"SpkN Out", NULL, "Speaker Mixer"},
	{"SpkP Out", NULL, "Speaker Mixer"},
	{"SPKOUTN", NULL, "SpkN Out"},
	{"SPKOUTP", NULL, "SpkP Out"},

	/* Boost Mixer */
	{"Boost Mixer", NULL, "ADC"},
	{"Capture Boost Switch", "Aux Capture Boost Switch", "AUX"},
	{"Aux Boost", "Aux Volume", "Boost Mixer"},
	{"Capture Boost", "Capture Switch", "Boost Mixer"},
	{"Mic Boost", "Mic Volume", "Boost Mixer"},

	/* Inputs */
	{"MICP", NULL, "Mic Boost"},
	{"MICN", NULL, "Mic PGA"},
	{"Mic PGA", NULL, "Capture Boost"},
	{"AUX", NULL, "Aux Input"},
};

struct snd_soc_dapm_route {   看上去好多都省略下了  connected
        const char *sink;  
        const char *control;  
        const char *source;  
        int (*connected)(struct snd_soc_dapm_widget *source,  
                         struct snd_soc_dapm_widget *sink);  
};  

tinyalsa 函数调用流程
https://www.cnblogs.com/linhaostudy/archive/2018/03/07/8515277.html

snd_soc_platform_driver  中的 pcm_new,使用是在  soc_new_pcm 中被调用的！  关于在什么时间被调用，可以看下 我收藏的图
snd_soc_platform_driver  中的 ops  大致是干什么的？  https://blog.csdn.net/DroidPhone/article/details/7316061  


xml 文件，会有一个函数解析  pathname  把它名下的 kcontrcl 设置用 tinymix修改传入  内核


